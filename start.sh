#!/bin/bash
set -e

echo "üöÄ Iniciando MueblesWow en Coolify..."

# Configurar variables de entorno
export NODE_ENV=production
export PORT=3001

# Funci√≥n de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üìã Configuraci√≥n inicial..."

# Si DATABASE_URL no est√° configurado, usar SQLite temporal
if [ -z "$DATABASE_URL" ]; then
    log "‚ö†Ô∏è DATABASE_URL no configurado, usando SQLite temporal"
    export DATABASE_URL="file:./dev.db"
fi

log "üìä DATABASE_URL configurado"

# Ir al directorio backend
cd /app/backend

# Intentar migraciones (sin fallar si no funciona)
log "üóÑÔ∏è Intentando migraciones..."
if npx prisma migrate deploy 2>/dev/null; then
    log "‚úÖ Migraciones completadas"
else
    log "‚ö†Ô∏è Migraciones fallaron, continuando..."
fi

# Intentar seed (sin fallar si no funciona)
log "üå± Intentando seed..."
if npx prisma db seed 2>/dev/null; then
    log "‚úÖ Seed completado"
else
    log "‚ö†Ô∏è Seed fall√≥, continuando..."
fi

# Iniciar el backend en background
log "üîß Iniciando backend en puerto 3001..."
npm start &
BACKEND_PID=$!

# Dar tiempo al backend para iniciar
sleep 5

# Verificar que el backend est√© ejecut√°ndose
if kill -0 $BACKEND_PID 2>/dev/null; then
    log "‚úÖ Backend iniciado (PID: $BACKEND_PID)"
else
    log "‚ùå Backend no se pudo iniciar"
fi

# Configurar nginx para que funcione
log "üåê Configurando Nginx..."

# Crear configuraci√≥n simple de nginx
cat > /etc/nginx/nginx.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    upstream backend {
        server 127.0.0.1:3001;
    }
    
    server {
        listen 80;
        server_name _;
        
        # Panel Admin
        location / {
            root /app/frontend/dist;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        
        # Panel P√∫blico
        location /public/ {
            alias /app/public/dist/;
            index index.html;
            try_files $uri $uri/ /public/index.html;
        }
        
        # API Backend
        location /api/ {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check
        location /health {
            proxy_pass http://backend/health;
            proxy_set_header Host $host;
        }
    }
}
EOF

# Probar configuraci√≥n de nginx
if nginx -t; then
    log "‚úÖ Configuraci√≥n de Nginx v√°lida"
else
    log "‚ùå Error en configuraci√≥n de Nginx"
    exit 1
fi

# Iniciar nginx
log "üåê Iniciando Nginx..."
nginx -g "daemon off;" &
NGINX_PID=$!

# Verificar que nginx est√© ejecut√°ndose
sleep 2
if kill -0 $NGINX_PID 2>/dev/null; then
    log "‚úÖ Nginx iniciado (PID: $NGINX_PID)"
else
    log "‚ùå Nginx no se pudo iniciar"
    exit 1
fi

log "üéâ MueblesWow iniciado correctamente!"
log "üìã Servicios ejecut√°ndose:"
log "   üîß Backend PID: $BACKEND_PID"
log "   üåê Nginx PID: $NGINX_PID"
log "   üîå Puerto: 80"

# Funci√≥n de limpieza
cleanup() {
    log "üõë Deteniendo servicios..."
    kill $BACKEND_PID $NGINX_PID 2>/dev/null || true
    exit 0
}

# Capturar se√±ales de terminaci√≥n
trap cleanup SIGTERM SIGINT

# Mantener el script ejecut√°ndose
while true; do
    # Verificar que los servicios sigan ejecut√°ndose
    if ! kill -0 $NGINX_PID 2>/dev/null; then
        log "‚ùå Nginx se detuvo inesperadamente"
        exit 1
    fi
    
    if ! kill -0 $BACKEND_PID 2>/dev/null; then
        log "‚ö†Ô∏è Backend se detuvo, reintentando..."
        cd /app/backend
        npm start &
        BACKEND_PID=$!
    fi
    
    sleep 30
done