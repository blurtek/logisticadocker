#!/bin/sh

echo "üöÄ Iniciando MueblesWow en Coolify..."

# Configurar variables de entorno
export NODE_ENV=production

# Usar la base de datos de Coolify si est√° disponible
if [ -n "$DATABASE_URL" ]; then
    echo "üìä Usando base de datos de Coolify: $DATABASE_URL"
else
    # Fallback a configuraci√≥n local
    export DATABASE_URL="postgresql://muebleswow:${POSTGRES_PASSWORD:-muebleswow123}@localhost:5432/muebleswow"
    echo "üìä Usando base de datos local: $DATABASE_URL"
fi

# Ejecutar migraciones
echo "üóÑÔ∏è Ejecutando migraciones..."
cd /app/backend
npx prisma migrate deploy

# Ejecutar seed
echo "üå± Ejecutando seed..."
npx prisma db seed

# Iniciar backend
echo "üîß Iniciando backend..."
npm start &
BACKEND_PID=$!

# Esperar a que el backend est√© listo
echo "‚è≥ Esperando backend..."
sleep 10

# Verificar que el backend est√© funcionando
for i in $(seq 1 30); do
    if curl -f http://localhost:3001/health > /dev/null 2>&1; then
        echo "‚úÖ Backend listo"
        break
    fi
    echo "Esperando backend... ($i/30)"
    sleep 2
done

# Iniciar Nginx
echo "üåê Iniciando Nginx..."
nginx -g "daemon off;" &
NGINX_PID=$!

echo "üéâ MueblesWow iniciado correctamente!"
echo "üìã URLs disponibles:"
echo "   üîê Panel Admin:     http://localhost/"
echo "   üë• Panel Clientes:  http://localhost/public/"
echo "   üîß Backend API:     http://localhost/api/"

# Funci√≥n de limpieza
cleanup() {
    echo "üõë Deteniendo servicios..."
    kill $BACKEND_PID $NGINX_PID 2>/dev/null
    exit 0
}

# Capturar se√±ales de terminaci√≥n
trap cleanup SIGTERM SIGINT

# Mantener el script ejecut√°ndose
wait