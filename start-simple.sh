#!/bin/bash

echo "üöÄ Iniciando MueblesWow (Versi√≥n Simple)..."

# Funci√≥n para logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Configurar variables de entorno
export NODE_ENV=production

# Verificar si DATABASE_URL est√° configurado
if [ -n "$DATABASE_URL" ]; then
    log "üìä Usando base de datos de Coolify"
    log "DATABASE_URL configurado: ${DATABASE_URL:0:20}..."
else
    log "‚ö†Ô∏è DATABASE_URL no configurado, usando configuraci√≥n local"
    export DATABASE_URL="postgresql://muebleswow:muebleswow123@localhost:5432/muebleswow"
fi

# Verificar archivos necesarios
log "üìÅ Verificando archivos..."
[ -d "/app/frontend/dist" ] && log "‚úÖ Frontend build existe" || log "‚ùå Frontend build NO existe"
[ -d "/app/public/dist" ] && log "‚úÖ Panel p√∫blico build existe" || log "‚ùå Panel p√∫blico build NO existe"

# Intentar ejecutar migraciones (con manejo de errores)
log "üóÑÔ∏è Ejecutando migraciones..."
cd /app/backend
if npx prisma migrate deploy; then
    log "‚úÖ Migraciones ejecutadas correctamente"
else
    log "‚ö†Ô∏è Error en migraciones, continuando..."
fi

# Intentar ejecutar seed (con manejo de errores)
log "üå± Ejecutando seed..."
if npx prisma db seed; then
    log "‚úÖ Seed ejecutado correctamente"
else
    log "‚ö†Ô∏è Error en seed, continuando..."
fi

# Iniciar backend
log "üîß Iniciando backend..."
npm start &
BACKEND_PID=$!

# Esperar a que el backend est√© listo (con timeout)
log "‚è≥ Esperando backend..."
for i in $(seq 1 30); do
    if curl -f http://localhost:3001/health > /dev/null 2>&1; then
        log "‚úÖ Backend listo en puerto 3001"
        break
    fi
    if [ $i -eq 30 ]; then
        log "‚ùå Backend no respondi√≥ despu√©s de 60 segundos"
        log "Continuando con Nginx..."
    fi
    sleep 2
done

# Verificar que Nginx est√© instalado
if command -v nginx > /dev/null; then
    log "‚úÖ Nginx est√° instalado"
else
    log "‚ùå Nginx NO est√° instalado"
    exit 1
fi

# Iniciar Nginx
log "üåê Iniciando Nginx..."
nginx -g "daemon off;" &
NGINX_PID=$!

# Verificar que Nginx est√© ejecut√°ndose
sleep 2
if pgrep nginx > /dev/null; then
    log "‚úÖ Nginx ejecut√°ndose correctamente"
else
    log "‚ùå Nginx NO est√° ejecut√°ndose"
    exit 1
fi

# Verificar puertos
log "üîå Verificando puertos..."
netstat -tlnp | grep :80 && log "‚úÖ Puerto 80 abierto" || log "‚ùå Puerto 80 NO abierto"
netstat -tlnp | grep :3001 && log "‚úÖ Puerto 3001 abierto" || log "‚ùå Puerto 3001 NO abierto"

log "üéâ MueblesWow iniciado correctamente!"
log "üìã URLs disponibles:"
log "   üîê Panel Admin:     http://localhost/"
log "   üë• Panel Clientes:  http://localhost/public/"
log "   üîß Backend API:     http://localhost/api/"

# Funci√≥n de limpieza
cleanup() {
    log "üõë Deteniendo servicios..."
    kill $BACKEND_PID $NGINX_PID 2>/dev/null
    exit 0
}

# Capturar se√±ales de terminaci√≥n
trap cleanup SIGTERM SIGINT

# Mantener el script ejecut√°ndose
wait
